import asyncio
from typing import List

from discord import DMChannel, Embed, Forbidden, Message, TextChannel
from discord.abc import User
from discord.ext.commands import Bot, Cog, Context, command


class Failed(Exception):
    def __init__(self, message: str):
        self.message = message


class Application(Cog):
    def __init__(self, bot: Bot):
        self.bot = bot
        self.enabled = True

        # TODO: Edit the channel_id and questions
        self.channel_id = 825202859154079785
        self.questions: List[str] = ["How old are you?", "What is your name?"]

    @property
    def channel(self) -> TextChannel:
        channel = self.bot.get_channel(self.channel_id)
        if not isinstance(channel, TextChannel):
            raise RuntimeError("Invalid channel_id configured")
        return channel

    async def get_answer(
        self,
        channel: DMChannel,
        author: User,
        question: str,
        question_no: int,
        total_questions: int,
    ) -> str:
        embed = Embed(
            title=f"Question {question_no} of {total_questions}",
            description=question + "\nType `cancel` to end cancel application.",
        )
        await channel.send(embed=embed)
        m: Message = await self.bot.wait_for(
            "message",
            check=lambda m: m.channel == channel and author == m.author,
            timeout=120,
        )
        if not m.content:
            raise Failed("No content in message!")
        if m.content.lower() == "cancel":
            raise Failed("Stopped since you cancelled!")
        return m.content

    @command()
    async def apply(self, ctx: Context):
        if not self.enabled:
            return await ctx.send("Application already closed!")
        answers: List[str] = []
        total_questions = len(self.questions)
        try:
            dm = ctx.author.dm_channel or await ctx.author.create_dm()
        except Forbidden:
            return await ctx.send("I'm unable to DM you")
        try:
            await ctx.message.add_reaction("\u2705")
            for index, question in enumerate(self.questions, 1):
                answers.append(
                    await self.get_answer(
                        dm, ctx.author, question, index, total_questions
                    )
                )
            await dm.send("Submitted!")
        except Failed as e:
            try:
                return await dm.send(e.message)
            except Forbidden:
                pass
        except Forbidden:
            return await ctx.send("I'm unable to DM you.")
        except asyncio.TimeoutError:
            return await dm.send("Timeout!")

        embed = Embed()
        embed.set_author(name=str(ctx.author), icon_url=str(ctx.author.avatar_url))
        embed.add_field(
            name="User",
            value="**User ID**: {0.id}\n**Username**: {0}".format(ctx.author),
            inline=False,
        )

        for question, answer in zip(self.questions, answers):
            embed.add_field(name=question, value=answer, inline=False)

        await self.channel.send(embed=embed)

    @command()
    @commands.has_any_role("Administrator")
    async def toggle(self, ctx: Context, value: bool):
        self.enabled = value
        await ctx.send(
            "Applications are now {}.".format("enabled" if value else "disabled")
        )


def setup(bot: Bot):
    bot.add_cog(Application(bot))
